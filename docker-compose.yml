x-common-env: &common_env
  - ./secret/.env

x-common-networks: &common_networks
  - backend_network
  - frontend_network

x-postgres-env: &postgres_env
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  DB_HOST: postgres_db
  DB_PORT: "5432"

x-redis-env: &redis_env
  REDIS_HOST: redis
  REDIS_PORT: "6379"

services:
  postgres:
    build:
      context: ./database
    container_name: postgres_db
    env_file: *common_env
    volumes:
      - postgres_data_volume:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    build:
      context: ./backend/redis/
    container_name: redis
    networks:
      - backend_network
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"

  gateway-service:
    build:
      context: .
      dockerfile: backend/gateway-service/Dockerfile
    container_name: gateway_service
    env_file: *common_env
    networks: *common_networks
    ports:
      - "3006:3006"
      
  auth-service:
    build:
      context: .
      dockerfile: backend/auth-service/Dockerfile
    container_name: auth_service
    depends_on:
      postgres:
        condition: service_healthy
    env_file: *common_env
    networks: *common_networks
    environment:
      <<: *postgres_env
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      FERNET_KEY: ${FERNET_KEY}
    ports:
      - "3001:3001"

  user-service:
    build:
      context: .
      dockerfile: backend/user-service/Dockerfile
    container_name: user_service
    depends_on:
      postgres:
        condition: service_healthy
    env_file: *common_env
    networks: *common_networks
    environment:
      <<: *postgres_env
      FERNET_KEY: ${FERNET_KEY}
    ports:
      - "3002:3002"

  livechat-service:
    build:
      context: .
      dockerfile: backend/livechat-service/Dockerfile
    container_name: livechat_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      gateway-service:
        condition: service_started
    env_file: *common_env
    networks: *common_networks
    environment:
      <<: [ *postgres_env, *redis_env ]
      DJANGO_SETTINGS_MODULE: livechat.settings 
    ports:
      - "3003:3003"
      
  pong-service:
    build:
      context: .
      dockerfile: backend/pong-service/Dockerfile
    container_name: pong_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      gateway-service:
        condition: service_started
      livechat-service:
        condition: service_started
    env_file: *common_env
    networks: *common_networks
    environment:
      <<: [ *postgres_env, *redis_env ]
    ports:
      - "3004:3004"

  matchmaking-service:
    build:
      context: .
      dockerfile: backend/matchmaking-service/Dockerfile
    container_name: matchmaking_service
    depends_on:
      postgres:
        condition: service_healthy
    env_file: *common_env
    networks: *common_networks
    environment:
      <<: *postgres_env
    ports:
      - "3005:3005"

  nginx:
    build:
      context: ./nginx
    container_name: nginx_proxy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./frontend:/usr/share/nginx/html/frontend:ro
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      auth-service:
        condition: service_started
      user-service:
        condition: service_started
      livechat-service:
        condition: service_started
      pong-service:
        condition: service_started
      matchmaking-service:
        condition: service_started
      gateway-service:
        condition: service_started
    networks:
      - frontend_network
      - backend_network

networks:
  backend_network:
    name: backend_network
  frontend_network:
    name: frontend_network

volumes:
  postgres_data_volume:
    name: postgres_data_volume

  redis_data:
    name: redis_data_volume
