TOUNAMENT :

TOUT EN CONSUMERS SAUF LE CURRENT TOURNAMENT EN VIEW

Creation :

-------------->
LOCAL :

WSS:
Creer un tournoi avec les pseudo  (en fonction du format 4-8-16).
Une fois rempli, on peut creer le tournoi --> Create tournament cote backend avec une view.

 --> Type == local
 --> Format == '4' / '8' /'16
 --> Player_list == {host, guest1, guest2, guest3} par exemple.
 --> Shuffle la liste. --> Remplir la DB avec celle-ci --> Tournament-participants
 --> Creation de toutes les sessions de jeux. (Tournament-service? utilisation de matchmaking-service)

 --> Remplir les tables de la DB

API_REST (Que la requete de current Tournament)
 --> Creation arbre (brackets, avec ceux en attente des parties a jouer).
 (Response -> Un JSON qui est generer par get_current_tournament dans le back, une view, se baser sur le fichier currentTournament.js)


 --> JOIN GAME (en utilisant l'existant du matchmaking PRIVATE BATTLE) 
    --> sur game-over, on met a jour le tournoi en dur, en fonction des winners dans les futurs parties (actuellement vide du tournoi).
        --> si la partie suivante et prete, a deux joueurs. Alors on creer la session de jeu et on envoi les invites (Dans la partie INFO, livechat-service).
        --> Si c'est la finale alors on clean le tournoi et les parties correspondantes
        --> Bien evidemment on garde l'historique des matchs (utilsation de la table game_history) a chaque fin de match.  (On ne stock pas si score est de 0-0)

 --> Give up tournament (Bouton GIVE UP TOURNAMENT)
    --> On met directement ce joueur en loser. dans sa prochaine game non jouee (Par exemple s'il doit attendre l'autre joueur, ou si la partie est prete et qu'il souhaite abandonner.)
        --> Destruction de la session de jeu, game over (Ajout d'un status de fin de partie, + envoi une reponse json particulier pour la gestion front a son opposant (le faire sortir de l'attente s'il y est, sinon supprimer l'invitation))
    --> Si c'est l'avant dernier joueur restant du tournoi alors le dernier joueur devient gagnant du tournoi.
    --> Penser a ce que les vues ne peuvent pas etre appeler en meme temps par deux joueurs. (Les bufferiser pour les avoir dans l'ordre)

 --> PAS DE TIMEOUT (SI TROP LONG --> RAGEQUIT ET LE TOURNOI CONTINUE)


-------------->
ONLINE :

HOST:
    CREATE:
    --> Utilisation du WSS, (channels)
        --> tournoi_${host_id}
        En consumers: (invite, kick, start, cancel)
            --> cancel discard tout les gens qui ont join ce channel. et annule les invite en cours.

GUESTS:
    JOIN:
        -->Il rejoint le channel du dessus.    
    QUIT:
        --> Il est discard du channel.


 --> Type == 'online'
 --> Format == '4' / '8' /'16
 --> Player_list == {host, guest1, guest2, guest3} par exemple. (AVEC LES ID bien sur)
 --> Shuffle la liste. --> Remplir la DB avec celle-ci --> Tournament-participants
 --> Creation de toutes les sessions de jeux. (Tournament-service? utilisation de matchmaking-service)

 --> Remplir les tables de la DB

API_REST
 --> Creation arbre (brackets, avec ceux en attente des parties a jouer).
 (Response -> Un JSON qui est generer par get_current_tournament dans le back, une view, se baser sur le fichier currentTournament.js)


 --> JOIN GAME (en utilisant l'existant du matchmaking PRIVATE BATTLE) 
    --> sur game-over, on met a jour le tournoi en dur, en fonction des winners dans les futurs parties (actuellement vide du tournoi).
        --> si la partie suivante et prete, a deux joueurs. Alors on creer la session de jeu et on envoi les invites (Dans la partie INFO, livechat-service).
        --> Si c'est la finale alors on clean le tournoi et les parties correspondantes
        --> Bien evidemment on garde l'historique des matchs (utilsation de la table game_history) a chaque fin de match.  (On ne stock pas si score est de 0-0)

 --> Give up tournament (Bouton GIVE UP TOURNAMENT)
    --> On met directement ce joueur en loser. dans sa prochaine game non jouee (Par exemple s'il doit attendre l'autre joueur, ou si la partie est prete et qu'il souhaite abandonner.)
        --> Destruction de la session de jeu, game over (Ajout d'un status de fin de partie, + envoi une reponse json particulier pour la gestion front a son opposant (le faire sortir de l'attente s'il y est, sinon supprimer l'invitation))
    --> Si c'est l'avant dernier joueur restant du tournoi alors le dernier joueur devient gagnant du tournoi.
    --> Penser a ce que les vues ne peuvent pas etre appeler en meme temps par deux joueurs. (Les bufferiser pour les avoir dans l'ordre)

 --> PAS DE TIMEOUT (SI TROP LONG --> RAGEQUIT ET LE TOURNOI CONTINUE)